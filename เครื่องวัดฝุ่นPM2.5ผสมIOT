#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <HTTPClient.h>

// --- Wi-Fi & Telegram ---
const char* ssid = "You Name Wifi";
const char* password = "Password";
String telegramToken = "You telegramToken";
String chatID = "you chatID telegram";

// --- RGB LED pins ---
int redPin = 13;
int greenPin = 12;
int bluePin = 14;

// --- Buzzer pins ---
int buzzer = 4;

// --- Dust sensor pins ---
int measurePin = 36;   // VP ของ ESP32 (ADC)
int ledPower = 2;      // LED IR ของเซ็นเซอร์

// --- Sensor timing ---
int samplingTime = 280; // microseconds
int deltaTime = 40;
int sleepTime = 9680;

// --- LCD ---
LiquidCrystal_I2C lcd(0x27, 20, 4);

// --- Sensor readings ---
float voMeasured = 0;
float calcVoltage = 0;
float dustDensity = 0;

// --- Calibration & smoothing ---
float airOffset = 0;       // ค่าพื้นฐานของอากาศสะอาด
int sampleCount = 10;      // จำนวนรอบเฉลี่ย
float movingAverage = 0;   // ค่า moving average
float alpha = 0.3;         // น้ำหนัก smooth (0-1)

// --- PM2.5 zone tracking ---
int lastZone = 0; // 0=ปลอดภัย,1=ปานกลาง,2=ไม่ดี,3=อันตราย,4=อันตรายมาก

// --- Setup ---
void setup() {
  Serial.begin(115200);

  pinMode(ledPower, OUTPUT);
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  pinMode(buzzer,OUTPUT);

  lcd.init();
  lcd.backlight();  
  lcd.setCursor(0,0);
  lcd.print("Dust Sensor Ready");
  delay(2000);
  lcd.clear();

  WiFi.begin(ssid, password);
  while(WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");

  calibrateAir(); // Calibrate offset ตอนเริ่มต้น
}

// --- Calibrate ค่าอากาศสะอาด ---
void calibrateAir(){
  float sum = 0;
  for(int i=0;i<sampleCount;i++){
    digitalWrite(ledPower, LOW);
    delayMicroseconds(samplingTime);
    voMeasured = analogRead(measurePin);
    delayMicroseconds(deltaTime);
    digitalWrite(ledPower, HIGH);
    delayMicroseconds(sleepTime);
    calcVoltage = voMeasured * (3.3 / 4095.0);
    sum += calcVoltage;
    delay(50);
  }
  airOffset = sum / sampleCount;
  Serial.print("Air Offset Voltage: "); Serial.println(airOffset,3);
}

// --- Set RGB LED ---
void setRGB(int r, int g, int b){
  analogWrite(redPin, r);
  analogWrite(greenPin, g);
  analogWrite(bluePin, b);
}

// --- Blink red for very high dust ---
void blinkRed(){
  setRGB(255,0,0);
  delay(500);
  setRGB(0,0,0);
  delay(500);
}

// --- Send Telegram message ---
void sendTelegram(String message) {
  if(WiFi.status()== WL_CONNECTED){
    HTTPClient http;
    String url = "https://api.telegram.org/bot" + telegramToken + "/sendMessage?chat_id=" + chatID + "&text=" + message;
    http.begin(url);
    int httpCode = http.GET();
    http.end();
  }
}

// --- Determine PM2.5 zone ---
int getZone(float pm){
  if(pm <= 35) return 0;       // ดี
  else if(pm <= 55) return 1;  // ปานกลาง
  else if(pm <= 150) return 2; // ไม่ดี
  else if(pm <= 250) return 3; // อันตราย
  else return 4;               // อันตรายมาก
}

// --- Main loop ---
void loop() {
  float sum = 0;
  for(int i=0;i<sampleCount;i++){
    digitalWrite(ledPower, LOW);
    delayMicroseconds(samplingTime);
    voMeasured = analogRead(measurePin);
    delayMicroseconds(deltaTime);
    digitalWrite(ledPower, HIGH);
    delayMicroseconds(sleepTime);
    calcVoltage = voMeasured * (3.3 / 4095.0);
    sum += calcVoltage;
    delay(10);
  }
  float avgVoltage = sum / sampleCount;

  float voltageDust = avgVoltage - airOffset;
  if(voltageDust < 0) voltageDust = 0;

  float currentDust = 170 * voltageDust;

  movingAverage = alpha*currentDust + (1-alpha)*movingAverage;
  dustDensity = movingAverage;

  Serial.print("PM2.5: "); Serial.print(dustDensity,1); Serial.println(" ug/m3");

  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("PM2.5:"); lcd.print(dustDensity,1); lcd.print(" ug/m3");

  int zone = getZone(dustDensity);

  // LED RGB ตาม zone
  switch(zone){
    case 0: setRGB(0,255,0); break;
    case 1: setRGB(255,255,0); break;
    case 2: setRGB(255,165,0); break;
    case 3: setRGB(255,0,0); break;
    case 4: blinkRed(); break;
  }

  // ส่ง Telegram เฉพาะเมื่อ zone เปลี่ยน
  if(zone != lastZone){
    String message;
    switch(zone){
      case 0: message = "PM2.5 safe: " + String(dustDensity,1) + " ug/m3"; break;
      case 1: message = "PM2.5 moderate: " + String(dustDensity,1) + " ug/m3 อากาศไม่ค่อยดีใส่เเมสด้วยนะครับ ผมห่วงใย"; break;
      case 2: message = "PM2.5 unhealthy: " + String(dustDensity,1) + " ug/m3 อากาศไม่ค่อยดีใส่เเมสด้วยนะครับ ผมห่วงใย"; break;
      case 3: message = "PM2.5 dangerous: " + String(dustDensity,1) + " ug/m3 อากาศตอนนี้ค่อนข้างอันตราย ผมห่วงใย"; break;
      case 4: message = "PM2.5 very high danger: " + String(dustDensity,1) + " ug/m3 อากาศตอนนี้อันตรายมากเลี่ยงการออกบ้าน ผมห่วงใย"; break;
    }
    sendTelegram(message);
    lastZone = zone;
  }

  delay(1000);
}
